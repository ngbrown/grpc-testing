/* eslint-disable */
// @generated by protobuf-ts 2.9.4 with parameter eslint_disable,ts_nocheck,long_type_string,client_grpc1
// @generated from protobuf file "greet.proto" (package "greet", syntax proto3)
// tslint:disable
// @ts-nocheck
import { Greeter } from "./greet.js";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { HelloReply } from "./greet.js";
import type { HelloRequest } from "./greet.js";
import * as grpc from "@grpc/grpc-js";
/**
 * The greeting service definition.
 *
 * @generated from protobuf service greet.Greeter
 */
export interface IGreeterClient {
    /**
     * Sends a greeting
     *
     * @generated from protobuf rpc: SayHello(greet.HelloRequest) returns (greet.HelloReply);
     */
    sayHello(input: HelloRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: HelloReply) => void): grpc.ClientUnaryCall;
    sayHello(input: HelloRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: HelloReply) => void): grpc.ClientUnaryCall;
    sayHello(input: HelloRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: HelloReply) => void): grpc.ClientUnaryCall;
    sayHello(input: HelloRequest, callback: (err: grpc.ServiceError | null, value?: HelloReply) => void): grpc.ClientUnaryCall;
}
/**
 * The greeting service definition.
 *
 * @generated from protobuf service greet.Greeter
 */
export class GreeterClient extends grpc.Client implements IGreeterClient {
    private readonly _binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions>;
    constructor(address: string, credentials: grpc.ChannelCredentials, options: grpc.ClientOptions = {}, binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions> = {}) {
        super(address, credentials, options);
        this._binaryOptions = binaryOptions;
    }
    /**
     * Sends a greeting
     *
     * @generated from protobuf rpc: SayHello(greet.HelloRequest) returns (greet.HelloReply);
     */
    sayHello(input: HelloRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: HelloReply) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: HelloReply) => void), callback?: ((err: grpc.ServiceError | null, value?: HelloReply) => void)): grpc.ClientUnaryCall {
        const method = Greeter.methods[0];
        return this.makeUnaryRequest<HelloRequest, HelloReply>(`/${Greeter.typeName}/${method.name}`, (value: HelloRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): HelloReply => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
}
